
version: '3.8'
services:
  # first, we define the three mongo servers that will act as replicas
  # here, we steup the hostname ports, and startup command
  # which is the same as discussed in the previous section
  mongodb1:
    container_name: mongodb1
    image: mongo:latest
    ports:
      - 37017:27017
    restart: always
    command: mongod --replSet my-mongo-set 
  mongodb2:
    container_name: mongodb2
    image: mongo:latest
    ports:
      - 37018:27017
    restart: always
    command: mongod --replSet my-mongo-set
  mongodb3:
    container_name: mongodb3
    image: mongo:latest
    ports:
      - 37019:27017
    restart: always
    command: mongod --replSet my-mongo-set

  # finally, we can define the initialization server
  # this runs the `rs.initiate` command to intialize
  # the replica set and connect the three servers to each other
  mongoinit:
    image: mongo:latest
    # this container will exit after executing the command
    restart: 'no'
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    command: >
      mongosh --host mongodb1:27017 --eval 
      '
      db = (new Mongo("mongodb1:27017")).getDB("test");
      config = {
      "_id" : "my-mongo-set",
      "members" : [
        {
          "_id" : 0,
          "host" : "mongodb1:27017",
           "priority": 2
        },
        {
          "_id" : 1,
          "host" : "mongodb2:27017",
           "priority": 0
        },
        {
          "_id" : 2,
          "host" : "mongodb3:27017",
           "priority": 0
        }
      ]
      };
      rs.initiate(config);
      '
